name: Integration
on:
  pull_request_target: # The event runs against the workflow and code from the base of the pull request
    types: [labeled] # Fork PR are run when labeled

permissions:
  id-token: write

jobs:
  aws-deploy-integration-tests:
    name: AWS Deployment Integration Tests
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'safe to test')
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/setup-node@v1
        with:
          node-version: 16.x
      - run: npx lerna bootstrap
      - run: npx lerna run compile
      - run: npx lerna run integration/aws-deploy --stream
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.BOT_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.BOT_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

  aws-func-integration-tests:
    name: AWS Functionality Integration Tests
    needs:
      - aws-deploy-integration-tests
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'safe to test')
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/setup-node@v1
        with:
          node-version: 16.x
      - run: npx lerna bootstrap
      - run: npx lerna run compile
      - run: npx lerna run integration/aws-func --stream
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.BOT_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.BOT_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

  aws-end-to-end-tests:
    name: AWS end-to-end Tests
    needs:
      - aws-func-integration-tests
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'safe to test')
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/setup-node@v1
        with:
          node-version: 16.x
      - run: npx lerna bootstrap
      - run: npx lerna run compile
      - run: npx lerna run integration/aws-end-to-end --stream
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.BOT_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.BOT_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

  aws-load-tests:
    name: AWS load tests
    needs:
      - aws-end-to-end-tests
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'safe to test')
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/setup-node@v1
        with:
          node-version: 16.x
      - run: npx lerna bootstrap
      - run: npx lerna run compile
      - run: npx lerna run integration/aws-load --stream
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.BOT_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.BOT_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

  aws-nuke-integration-tests:
    name: AWS Nuke Integration Tests
    if: always() && needs.aws-deploy-integration-tests.result == 'success' && contains(github.event.pull_request.labels.*.name, 'safe to test')
    continue-on-error: true
    needs:
      - aws-load-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/setup-node@v1
        with:
          node-version: 16.x
      - run: npx lerna bootstrap
      - run: npx lerna run compile
      - run: npx lerna run integration/aws-nuke --stream
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.BOT_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.BOT_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

  cli-integration-tests:
    name: CLI Integration Tests
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'safe to test')
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/setup-node@v1
        with:
          node-version: 16.x
      - run: npx lerna bootstrap
      - run: npx lerna run compile
      - run: npx lerna run integration/cli --stream

  local-integration-tests:
    name: Local Environment Integration Tests
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'safe to test')
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/setup-node@v1
        with:
          node-version: 16.x
      - run: npx lerna bootstrap
      - run: npx lerna run compile
      - run: npx lerna run integration/local --stream

  azure-deploy-integration-tests:
    name: Azure Deployment Integration Test
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'safe to test')
    steps:
      - name: 'Az CLI login'
        uses: azure/login@v1.4.0
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'

      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/setup-node@v1
        with:
          node-version: 16.x
      - run: npx lerna bootstrap
      - run: npx lerna run compile
      - run: npx lerna run integration/azure-deploy --stream
        env:
          AZURE_APP_ID: ${{ secrets.AZURE_CLIENTID }}
          AZURE_SECRET: ${{ secrets.AZURE_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANTID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTIONID }}
          REGION: East US
          publisherEmail: noreply@booster.cloud
          publisherName: Booster App
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENTID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTIONID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANTID }}

  azure-nuke-integration-tests:
    name: Azure Nuke Integration Test
    if: always() && needs.azure-deploy-integration-tests.result == 'success' && contains(github.event.pull_request.labels.*.name, 'safe to test')
    continue-on-error: true
    needs:
      - azure-deploy-integration-tests
    runs-on: ubuntu-latest
    steps:
      - name: 'Az CLI login'
        uses: azure/login@v1.4.0
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'

      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/setup-node@v1
        with:
          node-version: 16.x
      - run: npx lerna bootstrap
      - run: npx lerna run compile
      - run: npx lerna run integration/azure-nuke --stream
        env:
          AZURE_APP_ID: ${{ secrets.AZURE_CLIENTID }}
          AZURE_SECRET: ${{ secrets.AZURE_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANTID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTIONID }}
          REGION: East US
          publisherEmail: noreply@booster.cloud
          publisherName: Booster App
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENTID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTIONID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANTID }}

